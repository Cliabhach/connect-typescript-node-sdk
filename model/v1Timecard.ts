/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


/**
* Represents a timecard for an employee.
*/
export class V1Timecard {
    /**
    * The timecard\'s unique ID.
    */
    'id'?: string;
    /**
    * The ID of the employee the timecard is associated with.
    */
    'employeeId': string;
    /**
    * If true, the timecard was deleted by the merchant, and it is no longer valid.
    */
    'deleted'?: boolean;
    /**
    * The clock-in time for the timecard, in ISO 8601 format.
    */
    'clockinTime'?: string;
    /**
    * The clock-out time for the timecard, in ISO 8601 format. Provide this value only if importing timecard information from another system.
    */
    'clockoutTime'?: string;
    /**
    * The ID of the location the employee clocked in from. We strongly reccomend providing a clockin_location_id. Square uses the clockin_location_id to determine a timecardâ€™s timezone and overtime rules.
    */
    'clockinLocationId'?: string;
    /**
    * The ID of the location the employee clocked out from. Provide this value only if importing timecard information from another system.
    */
    'clockoutLocationId'?: string;
    /**
    * The time when the timecard was created, in ISO 8601 format.
    */
    'createdAt'?: string;
    /**
    * The time when the timecard was most recently updated, in ISO 8601 format.
    */
    'updatedAt'?: string;
    /**
    * The total number of regular (non-overtime) seconds worked in the timecard.
    */
    'regularSecondsWorked'?: number;
    /**
    * The total number of overtime seconds worked in the timecard.
    */
    'overtimeSecondsWorked'?: number;
    /**
    * The total number of doubletime seconds worked in the timecard.
    */
    'doubletimeSecondsWorked'?: number;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "id",
            "baseName": "id",
            "type": "string"
        },
        {
            "name": "employeeId",
            "baseName": "employee_id",
            "type": "string"
        },
        {
            "name": "deleted",
            "baseName": "deleted",
            "type": "boolean"
        },
        {
            "name": "clockinTime",
            "baseName": "clockin_time",
            "type": "string"
        },
        {
            "name": "clockoutTime",
            "baseName": "clockout_time",
            "type": "string"
        },
        {
            "name": "clockinLocationId",
            "baseName": "clockin_location_id",
            "type": "string"
        },
        {
            "name": "clockoutLocationId",
            "baseName": "clockout_location_id",
            "type": "string"
        },
        {
            "name": "createdAt",
            "baseName": "created_at",
            "type": "string"
        },
        {
            "name": "updatedAt",
            "baseName": "updated_at",
            "type": "string"
        },
        {
            "name": "regularSecondsWorked",
            "baseName": "regular_seconds_worked",
            "type": "number"
        },
        {
            "name": "overtimeSecondsWorked",
            "baseName": "overtime_seconds_worked",
            "type": "number"
        },
        {
            "name": "doubletimeSecondsWorked",
            "baseName": "doubletime_seconds_worked",
            "type": "number"
        }    ];

    static getAttributeTypeMap() {
        return V1Timecard.attributeTypeMap;
    }
}

