/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * The version of the OpenAPI document: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { CatalogCategory } from './catalogCategory';
import { CatalogDiscount } from './catalogDiscount';
import { CatalogImage } from './catalogImage';
import { CatalogItem } from './catalogItem';
import { CatalogItemVariation } from './catalogItemVariation';
import { CatalogMeasurementUnit } from './catalogMeasurementUnit';
import { CatalogModifier } from './catalogModifier';
import { CatalogModifierList } from './catalogModifierList';
import { CatalogPricingRule } from './catalogPricingRule';
import { CatalogProductSet } from './catalogProductSet';
import { CatalogTax } from './catalogTax';
import { CatalogTimePeriod } from './catalogTimePeriod';
import { CatalogV1Id } from './catalogV1Id';

/**
* The wrapper object for object types in the Catalog data model. The type of a particular `CatalogObject` is determined by the value of `type` and only the corresponding data field may be set.  - if type = `ITEM`, only `item_data` will be populated and it will contain a valid [CatalogItem](#type-catalogitem) object. - if type = `ITEM_VARIATION`, only `item_variation_data` will be populated and it will contain a valid [CatalogItemVariation](#type-catalogitemvariation) object. - if type = `MODIFIER`, only `modifier_data` will be populated and it will contain a valid [CatalogModifier](#type-catalogmodifier) object. - if type = `MODIFIER_LIST`, only `modifier_list_data` will be populated and it will contain a valid [CatalogModifierList](#type-catalogmodifierlist) object. - if type = `CATEGORY`, only `category_data` will be populated and it will contain a valid [CatalogCategory](#type-catalogcategory) object. - if type = `DISCOUNT`, only `discount_data` will be populated and it will contain a valid [CatalogDiscount](#type-catalogdiscount) object. - if type = `TAX`, only `tax_data` will be populated and it will contain a valid [CatalogTax](#type-catalogtax) object. - if type = `IMAGE`, only `image_data` will be populated and it will contain a valid [CatalogImage](#type-catalogimage) object.  For a more detailed discussion of the Catalog data model, please see the [Design a Catalog](/catalog-api/design-a-catalog) guide.
*/
export class CatalogObject {
    /**
    * The type of this object. Each object type has expected properties expressed in a structured format within its corresponding `*_data` field below. See [CatalogObjectType](#type-catalogobjecttype) for possible values
    */
    'type': string;
    /**
    * An identifier to reference this object in the catalog. When a new CatalogObject is inserted, the client should set the id to a temporary identifier starting with a `\'#\'` character. Other objects being inserted or updated within the same request may use this identifier to refer to the new object.  When the server receives the new object, it will supply a unique identifier that replaces the temporary identifier for all future references.
    */
    'id': string;
    /**
    * Last modification [timestamp](#workingwithdates) in RFC 3339 format, e.g., `\"2016-08-15T23:59:33.123Z\"` would indicate the UTC time (denoted by `Z`) of August 15, 2016 at 23:59:33 and 123 milliseconds.
    */
    'updatedAt'?: string;
    /**
    * The version of the object. When updating an object, the version supplied must match the version in the database, otherwise the write will be rejected as conflicting.
    */
    'version'?: number;
    /**
    * If `true`, the object has been deleted from the database. Must be `false` for new objects being inserted. When deleted, the `updated_at` field will equal the deletion time.
    */
    'isDeleted'?: boolean;
    /**
    * The Connect V1 IDs for this object at each [location](#type-location) where it is present, where they differ from the object\'s Connect V2 ID. The field will only be present for objects that have been created or modified by legacy APIs.
    */
    'catalogV1Ids'?: Array<CatalogV1Id>;
    /**
    * If `true`, this object is present at all locations (including future locations), except where specified in the `absent_at_location_ids` field. If `false`, this object is not present at any locations (including future locations), except where specified in the `present_at_location_ids` field. If not specified, defaults to `true`.
    */
    'presentAtAllLocations'?: boolean;
    /**
    * A list of locations where the object is present, even if `present_at_all_locations` is `false`.
    */
    'presentAtLocationIds'?: Array<string>;
    /**
    * A list of locations where the object is not present, even if `present_at_all_locations` is `true`.
    */
    'absentAtLocationIds'?: Array<string>;
    /**
    * Identifies the `CatalogImage` attached to this `CatalogObject`.
    */
    'imageId'?: string;
    'itemData'?: CatalogItem;
    'categoryData'?: CatalogCategory;
    'itemVariationData'?: CatalogItemVariation;
    'taxData'?: CatalogTax;
    'discountData'?: CatalogDiscount;
    'modifierListData'?: CatalogModifierList;
    'modifierData'?: CatalogModifier;
    'timePeriodData'?: CatalogTimePeriod;
    'productSetData'?: CatalogProductSet;
    'pricingRuleData'?: CatalogPricingRule;
    'imageData'?: CatalogImage;
    'measurementUnitData'?: CatalogMeasurementUnit;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "type",
            "baseName": "type",
            "type": "string"
        },
        {
            "name": "id",
            "baseName": "id",
            "type": "string"
        },
        {
            "name": "updatedAt",
            "baseName": "updated_at",
            "type": "string"
        },
        {
            "name": "version",
            "baseName": "version",
            "type": "number"
        },
        {
            "name": "isDeleted",
            "baseName": "is_deleted",
            "type": "boolean"
        },
        {
            "name": "catalogV1Ids",
            "baseName": "catalog_v1_ids",
            "type": "Array<CatalogV1Id>"
        },
        {
            "name": "presentAtAllLocations",
            "baseName": "present_at_all_locations",
            "type": "boolean"
        },
        {
            "name": "presentAtLocationIds",
            "baseName": "present_at_location_ids",
            "type": "Array<string>"
        },
        {
            "name": "absentAtLocationIds",
            "baseName": "absent_at_location_ids",
            "type": "Array<string>"
        },
        {
            "name": "imageId",
            "baseName": "image_id",
            "type": "string"
        },
        {
            "name": "itemData",
            "baseName": "item_data",
            "type": "CatalogItem"
        },
        {
            "name": "categoryData",
            "baseName": "category_data",
            "type": "CatalogCategory"
        },
        {
            "name": "itemVariationData",
            "baseName": "item_variation_data",
            "type": "CatalogItemVariation"
        },
        {
            "name": "taxData",
            "baseName": "tax_data",
            "type": "CatalogTax"
        },
        {
            "name": "discountData",
            "baseName": "discount_data",
            "type": "CatalogDiscount"
        },
        {
            "name": "modifierListData",
            "baseName": "modifier_list_data",
            "type": "CatalogModifierList"
        },
        {
            "name": "modifierData",
            "baseName": "modifier_data",
            "type": "CatalogModifier"
        },
        {
            "name": "timePeriodData",
            "baseName": "time_period_data",
            "type": "CatalogTimePeriod"
        },
        {
            "name": "productSetData",
            "baseName": "product_set_data",
            "type": "CatalogProductSet"
        },
        {
            "name": "pricingRuleData",
            "baseName": "pricing_rule_data",
            "type": "CatalogPricingRule"
        },
        {
            "name": "imageData",
            "baseName": "image_data",
            "type": "CatalogImage"
        },
        {
            "name": "measurementUnitData",
            "baseName": "measurement_unit_data",
            "type": "CatalogMeasurementUnit"
        }    ];

    static getAttributeTypeMap() {
        return CatalogObject.attributeTypeMap;
    }
}

